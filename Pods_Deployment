
Pods:

A pod is the smallest deployable unit in Kubernetes.
It represents a single instance of a running process in the cluster.
Pods can contain one or more containers that share the same network namespace, storage, and a few other resources.
Containers within the same pod can communicate with each other using localhost.
Pods are usually short-lived and are managed by controllers like Deployments.
===============================================
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
    - name: my-container
      image: nginx:latest
======================================
Deployments:

Deployments are higher-level abstractions that manage the desired state of a set of pods.
They provide features like scaling, rolling updates, and self-healing.
Deployments ensure that a specified number of replicas of a pod are running at all times.
If a pod fails or needs to be replaced, the Deployment controller automatically creates a new pod to maintain the desired replica count.
==============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-container
          image: nginx:latest
====================================================

Example : Web server + database container in a Pod.

apiVersion: v1
kind: Pod
metadata:
  name: web-db-pod
spec:
  containers:
    - name: web-server
      image: my-web-server-image:latest
      ports:
        - containerPort: 80
    - name: database
      image: my-database-image:latest
      ports:
        - containerPort: 5432

======================================================

Example : Deploying a new version of an app while maintaining availability.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
spec:
  replicas: 4 # Number of desired replicas
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-app-container
          image: my-app:v1 # Initial version
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1 # Number of unavailable pods during the update
      maxSurge: 1 # Number of additional pods allowed during the update
============================================================================================


